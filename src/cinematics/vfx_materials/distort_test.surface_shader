<shader>

	<inputs>
		<input name="distortAmount" type="float">0.0</input>
		<input name="normalMap"   type="texture" address="wrap">materials/dev/dev_normal.dds</input>
        <input name="specularMap" type="texture" address="wrap" />
		<input name="emissiveMap" type="texture" address="wrap" />
	</inputs>	

	<params>
		<param name="vsPosition">true</param>
		<param name="vsNormal">true</param>
		<param name="vsTangent">true</param>
		<param name="vsBinormal">true</param>
		<param name="twoSided">false</param>
	</params>
	
	<code>
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}		
		void MaterialShader(in Material_Input input, inout Material material)
		{	
            // animate the amount of distortion by 50%
            //float sine = sin(time * 3);
			//float anim = 0.8 + pow(sine, 3) * 0.4f;
			float3 tsNormal = DecodeNormal( tex2D(normalMap, input.texCoord ) );

			// standing still = distortAmount 1, max cloak speed = distortAmount 0.7
			// standing still -> min distortion 0.05
			// moving at max cloak speed -> distortion 0.01
			float intensity = 1.0 - distortAmount;
			
			// go up to 80% and scale down again to hive the distort effect
			//if (intensity > 0.80) {
			//	intensity = 1 - ((intensity - 0.8) / 0.2);
			//}

            if (intensity > 0){
                float distortionScalar = intensity * 0.05 + 0.01;
                float anim1 = intensity * cos((time * 3.5 + input.vsTangent * 3));
				float anim2 = intensity * cos((time * 2 + input.vsBinormal * 3));
                
                float3 vsNormal = min(max(input.vsTangent,  -distortionScalar), distortionScalar) * anim1 * tsNormal.x -
                                  min(max(input.vsBinormal, -distortionScalar), distortionScalar) * anim2 * 2 * tsNormal.y;

            
                //vsNormal = normalize(vsNormal);
                float fresnel = pow(saturate(-input.vsNormal.z), 3);
                
                // fade out as player gets closer
                //float distance = sqrt(input.vsPosition.x * input.vsPosition.x + input.vsPosition.y * input.vsPosition.y + input.vsPosition.z * input.vsPosition.z);
                //float distIntensity = saturate((distance - 2.0)/2.0);
                float screenIntensity = 0.5 * (1.0 - saturate((input.vsPosition.x + input.vsPosition.y + input.vsPosition.z) * 0.05f));

                material.ssDistortion = vsNormal.xy;
                material.transmissionColor = max(0.45, (1.0 - intensity * 2.8 * fresnel)) * input.color.rgb; //max(0.45, (1.0 - intensity * 1.6 * fresnel * screenIntensity)) * input.color.rgb;
               
                material.emissive = float3(screenIntensity, screenIntensity, screenIntensity);

                //float4 glowPoints = tex2D(emissiveMap, input.texCoord);
                //offset = min(1, offset);
                //float3 specMap = tex2D(specularMap, input.texCoord).rgb;
                //float blurAmount = pow(((specMap.r + specMap.g + specMap.b) * 0.3333333f), 0.333f); // * (1.0f - distortAmount);
                //float3 glow = float3(0.0, -0.01, -0.06) * (sin(offset) * 0.03);
                
                //material.emissive = glowPoints * intensity * 0.16;
            }
		}
	]]>
	</code>

</shader>