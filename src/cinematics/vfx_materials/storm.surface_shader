<shader>

	<inputs>

		<input name="noiseMap" type="texture" address="wrap" />
		<input name="startTime" type="float">0.0</input>
        <input name="offset" type="float">0.0</input>
        <input name="intensity" type="float">1.0</input>
	</inputs>	

	<params>
        <param name="wsNormal">true</param>
		<param name="twoSided">false</param>
		<param name="alphaTest">true</param>	
	</params>
	
	<code>
	<![CDATA[
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			const float3 tint = float3(1.0, 0.6, 0.2) * intensity; //float3(0.54, 0.31, 1.0) * intensity; //float3(1, 2.48, 4); //float3(8, 4, 2);

			float t_storm = time - startTime;
            float height = pow(1 + sin(t_storm * 4.4), 2) * (1 + offset); //pow(1 + sin(t_storm%1.5708), 2);
            
			//float3 noise = tex2D( noiseMap, (input.texCoord + float2(t_storm *-0.05, t_storm * -0.05)) * float2(2, 1.25) ).rgb; 
			float3 noise2 = tex2D( noiseMap, (input.texCoord + float2(t_storm *-0.25, t_storm * -0.25)) * float2(3.2, 2) ).rgb; 
            
            const float frequency = 3.14159 * 1.4; // flashing frequency - 0.7143 sec
            float amount = max( pow(sin(t_storm * frequency), 2) + 0.6 * pow(sin(t_storm * frequency + 0.28), 2), 0 );
            //float amount2 = pow(sin(t_storm * frequency), 4);
            //float height = pow(((t_storm * frequency)%frequency)/frequency, 2);
			
            material.emissive = ( noise2 ) * tint * amount + float4(-0.4, -0.5, 0.05, 1.0) * intensity; //float4(-0.135, -0.155, -0.25, 1.0) * intensity;
			material.albedo   = ( noise2 ) * tint * amount;
			material.opacity  = ( noise2 ) * amount;
            material.wsOffset = input.wsNormal * (0.01 * height + 0.01);
		}
	]]>
	</code>

</shader>